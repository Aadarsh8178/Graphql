{"version":3,"sources":["queries.js","components/BookDetails.js","components/BooksList.js","components/AddBook.js","App.js","index.js"],"names":["GET_BOOKS","gql","GET_AUTHORS","ADD_BOOK","GET_BOOK","DELETE_BOOK","BookDetails","id","setSelectedBook","deleteAllowed","ind","useLazyQuery","getBook","loading","error","data","useMutation","update","deleteBook","useEffect","variables","book","name","genre","author","className","books","map","item","style","background","onClick","refetchQueries","query","BooksList","useState","selectedBook","useQuery","index","AddBook","setName","setGenre","authorId","setAuthorId","addBook","onSubmit","e","preventDefault","type","value","onChange","target","required","authors","errorLink","onError","graphqlErrors","networkError","forEach","message","location","path","console","log","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37429178.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_BOOKS = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nexport const GET_AUTHORS = gql`\n  query {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nexport const ADD_BOOK = gql`\n  mutation addBook($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      genre\n      id\n    }\n  }\n`;\n\nexport const GET_BOOK = gql`\n  query ($id: ID!) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const DELETE_BOOK = gql`\n  mutation ($id: ID!) {\n    deleteBook(id: $id) {\n      name\n      id\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { DELETE_BOOK, GET_BOOK, GET_BOOKS } from \"../queries\";\n\nconst BookDetails = ({ id, setSelectedBook, deleteAllowed, ind }) => {\n  const [getBook, { loading, error, data }] = useLazyQuery(GET_BOOK);\n  const [deleteBook] = useMutation(DELETE_BOOK, {\n    update() {\n      setSelectedBook(null);\n    },\n  });\n\n  useEffect(() => {\n    if (id) {\n      getBook({\n        variables: {\n          id,\n        },\n      });\n    }\n  }, [id]);\n\n  const handleDelete = () => {\n    deleteBook({\n      variables: {\n        id,\n      },\n      refetchQueries: [{ query: GET_BOOKS }],\n    });\n  };\n  if (!id) {\n    return (\n      <div id=\"book-details\">\n        <p>No book selected...</p>\n      </div>\n    );\n  }\n  return (\n    <div id=\"book-details\">\n      {loading && <p>Loading...</p>}\n      {error && <p>Error</p>}\n      {data && data.book && (\n        <div>\n          <h2>{data.book.name}</h2>\n          <p>{data.book.genre}</p>\n          <p>{data.book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {data.book.author.books.map((item) => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n          {deleteAllowed ? (\n            <p\n              className=\"theme-button\"\n              style={{ background: \"#eee\" }}\n              onClick={handleDelete}\n            >\n              Delete\n            </p>\n          ) : (\n            <span className=\"dull-text\">\n              Delete allowed from {ind + 1}th book onwards{\" \"}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookDetails;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_BOOKS } from \"../queries\";\nimport BookDetails from \"./BookDetails\";\n\nconst BooksList = () => {\n  const [selectedBook, setSelectedBook] = useState();\n  const { loading, error, data } = useQuery(GET_BOOKS);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n  if (error) {\n    return <p>error</p>;\n  }\n\n  return (\n    <div>\n      <ul id=\"book-list\">\n        {data.books.map((book, ind) => (\n          <li\n            key={book.id}\n            onClick={() => setSelectedBook({ ...book, index: ind })}\n          >\n            {book.name}\n          </li>\n        ))}\n      </ul>\n      <BookDetails\n        id={selectedBook?.id}\n        setSelectedBook={setSelectedBook}\n        deleteAllowed={selectedBook?.index > 6}\n        ind={5}\n      />\n    </div>\n  );\n};\n\nexport default BooksList;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { ADD_BOOK, GET_AUTHORS, GET_BOOKS } from \"../queries\";\n\nconst AddBook = () => {\n  const [name, setName] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [authorId, setAuthorId] = useState(\"\");\n\n  const { data } = useQuery(GET_AUTHORS);\n  const [addBook] = useMutation(ADD_BOOK);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!name || !genre || !authorId) {\n      return;\n    }\n    addBook({\n      variables: {\n        name,\n        genre,\n        authorId,\n      },\n      refetchQueries: [{ query: GET_BOOKS }],\n    });\n  };\n\n  return (\n    <form id=\"add-book\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <label>Book name:</label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n      </div>\n      <div className=\"field\">\n        <label>Genre:</label>\n        <input\n          type=\"text\"\n          value={genre}\n          onChange={(e) => setGenre(e.target.value)}\n          required\n        />\n      </div>\n      <div className=\"field\">\n        <label>Author:</label>\n        <select\n          value={authorId}\n          onChange={(e) => setAuthorId(e.target.value)}\n          required\n        >\n          <option>Select author</option>\n          {data?.authors &&\n            data.authors.map((author) => (\n              <option value={author.id} key={author.id}>\n                {author.name}\n              </option>\n            ))}\n        </select>\n      </div>\n      <button>+</button>\n    </form>\n  );\n};\n\nexport default AddBook;\n","import React from \"react\";\nimport BooksList from \"./components/BooksList\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  from,\n  InMemoryCache,\n  HttpLink,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport AddBook from \"./components/AddBook\";\n\n//apollo client setup\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n  if (graphqlErrors) {\n    graphqlErrors.forEach(({ message, location, path }) => {\n      console.log(\"GraphQL ERROR : \" + message);\n    });\n  }\n  if (networkError) {\n    console.log(\"Network ERROR\");\n  }\n});\nconst link = from([errorLink, new HttpLink({ uri: \"/graphql\" })]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Reading List</h1>\n        <BooksList />\n        <AddBook />\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}